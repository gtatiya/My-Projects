
Training.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000033c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  0000033c  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000085  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004b6  00000000  00000000  00000491  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016a  00000000  00000000  00000947  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003eb  00000000  00000000  00000ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000010a  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002b0  00000000  00000000  00001046  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  000012f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 39       	cpi	r26, 0x9C	; 156
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  7a:	0c 94 9c 01 	jmp	0x338	; 0x338 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <adc_read>:
return 0;
}

unsigned int adc_read(unsigned chn)
{
ADMUX=chn|0x40;
  82:	80 64       	ori	r24, 0x40	; 64
  84:	87 b9       	out	0x07, r24	; 7
ADCSRA=0xd7;
  86:	87 ed       	ldi	r24, 0xD7	; 215
  88:	86 b9       	out	0x06, r24	; 6
while((ADCSRA&0x10)==0);
  8a:	34 9b       	sbis	0x06, 4	; 6
  8c:	fe cf       	rjmp	.-4      	; 0x8a <adc_read+0x8>
ADCSRA|=0x10;
  8e:	34 9a       	sbi	0x06, 4	; 6
return ADC;
  90:	24 b1       	in	r18, 0x04	; 4
  92:	35 b1       	in	r19, 0x05	; 5
}
  94:	c9 01       	movw	r24, r18
  96:	08 95       	ret

00000098 <lcd_cmd>:
dis_cmd(0x06);
}

void lcd_cmd(int x)
{
PORTD=x;
  98:	82 bb       	out	0x12, r24	; 18
PORTD&=~(1<<rs);
  9a:	90 98       	cbi	0x12, 0	; 18
PORTD&=~(1<<rw);
  9c:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
  9e:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	8a ef       	ldi	r24, 0xFA	; 250
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_cmd+0xc>
_delay_ms(1);
PORTD&=~(1<<en);
  a8:	92 98       	cbi	0x12, 2	; 18
}
  aa:	08 95       	ret

000000ac <dis_cmd>:

void dis_cmd(int x)
{
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	8c 01       	movw	r16, r24
int x1;
x1=x&0xf0;
lcd_cmd(x1);
  b2:	80 7f       	andi	r24, 0xF0	; 240
  b4:	90 70       	andi	r25, 0x00	; 0
  b6:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
x1=(x<<4)&0xf0;
lcd_cmd(x1);
  ba:	84 e0       	ldi	r24, 0x04	; 4
  bc:	00 0f       	add	r16, r16
  be:	11 1f       	adc	r17, r17
  c0:	8a 95       	dec	r24
  c2:	e1 f7       	brne	.-8      	; 0xbc <dis_cmd+0x10>
  c4:	c8 01       	movw	r24, r16
  c6:	90 70       	andi	r25, 0x00	; 0
  c8:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
}
  cc:	1f 91       	pop	r17
  ce:	0f 91       	pop	r16
  d0:	08 95       	ret

000000d2 <lcd_init>:
}


void lcd_init()
{
dis_cmd(0x02);
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
dis_cmd(0x28);
  da:	88 e2       	ldi	r24, 0x28	; 40
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
dis_cmd(0x0C);
  e2:	8c e0       	ldi	r24, 0x0C	; 12
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
dis_cmd(0x06);
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
}
  f2:	08 95       	ret

000000f4 <lcd_data>:
lcd_cmd(x1);
}

void lcd_data(int x)
{
PORTD=x;
  f4:	82 bb       	out	0x12, r24	; 18
PORTD|=(1<<rs);
  f6:	90 9a       	sbi	0x12, 0	; 18
PORTD&=~(1<<rw);
  f8:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
  fa:	92 9a       	sbi	0x12, 2	; 18
  fc:	8a ef       	ldi	r24, 0xFA	; 250
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_data+0xc>
_delay_ms(1);
PORTD&=~(1<<en);
 104:	92 98       	cbi	0x12, 2	; 18
}
 106:	08 95       	ret

00000108 <dis_data>:

void dis_data(int x)
{
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	8c 01       	movw	r16, r24
int x1;
x1=x&0xf0;
lcd_data(x1);
 10e:	80 7f       	andi	r24, 0xF0	; 240
 110:	90 70       	andi	r25, 0x00	; 0
 112:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_data>
x1=(x<<4)&0xf0;
lcd_data(x1);
 116:	94 e0       	ldi	r25, 0x04	; 4
 118:	00 0f       	add	r16, r16
 11a:	11 1f       	adc	r17, r17
 11c:	9a 95       	dec	r25
 11e:	e1 f7       	brne	.-8      	; 0x118 <dis_data+0x10>
 120:	c8 01       	movw	r24, r16
 122:	90 70       	andi	r25, 0x00	; 0
 124:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_data>
}
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	08 95       	ret

0000012e <lcd_number>:
  dis_data(str[i]);
  }
}

void lcd_number(int abc)
{
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	8c 01       	movw	r16, r24
 dis_cmd(0x04);
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
 unsigned int d=0; 
   d=abc%10;
   dis_data(d+48);
 13c:	c8 01       	movw	r24, r16
 13e:	6a e0       	ldi	r22, 0x0A	; 10
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	0e 94 75 01 	call	0x2ea	; 0x2ea <__divmodhi4>
 146:	c0 96       	adiw	r24, 0x30	; 48
 148:	0e 94 84 00 	call	0x108	; 0x108 <dis_data>
   abc=abc/10;
   d=abc%10;
   dis_data(d+48);
 14c:	c8 01       	movw	r24, r16
 14e:	6a e0       	ldi	r22, 0x0A	; 10
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	0e 94 75 01 	call	0x2ea	; 0x2ea <__divmodhi4>
 156:	cb 01       	movw	r24, r22
 158:	6a e0       	ldi	r22, 0x0A	; 10
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	0e 94 75 01 	call	0x2ea	; 0x2ea <__divmodhi4>
 160:	c0 96       	adiw	r24, 0x30	; 48
 162:	0e 94 84 00 	call	0x108	; 0x108 <dis_data>
}
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	08 95       	ret

0000016c <lcd_string>:
return ADC;
}


void lcd_string(char *str)
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	ec 01       	movw	r28, r24
 172:	03 c0       	rjmp	.+6      	; 0x17a <lcd_string+0xe>

  for(int i=0;str[i]!='\0';i++)
  {
  dis_data(str[i]);
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 84 00 	call	0x108	; 0x108 <dis_data>


void lcd_string(char *str)
{

  for(int i=0;str[i]!='\0';i++)
 17a:	89 91       	ld	r24, Y+
 17c:	88 23       	and	r24, r24
 17e:	d1 f7       	brne	.-12     	; 0x174 <lcd_string+0x8>
  {
  dis_data(str[i]);
  }
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <main>:

unsigned int adc_read(unsigned);   //Displaying the values of ADC on LCD


int main()
{
 186:	af 92       	push	r10
 188:	bf 92       	push	r11
 18a:	cf 92       	push	r12
 18c:	df 92       	push	r13
 18e:	ef 92       	push	r14
 190:	ff 92       	push	r15
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
DDRA=0x00;  //connect DTMF to PA0-3
 19a:	1a ba       	out	0x1a, r1	; 26
DDRD=0xff;  //connect LCD
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	81 bb       	out	0x11, r24	; 17
DDRB=0x0f;  //motor output PB0-3
 1a0:	8f e0       	ldi	r24, 0x0F	; 15
 1a2:	87 bb       	out	0x17, r24	; 23
lcd_init();
 1a4:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_init>

dis_cmd(0x84);
 1a8:	84 e8       	ldi	r24, 0x84	; 132
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
lcd_string("Dual Tone");
 1b0:	80 e6       	ldi	r24, 0x60	; 96
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_string>
dis_cmd(0xc0);
 1b8:	80 ec       	ldi	r24, 0xC0	; 192
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
lcd_string("Multiple Frequen");_delay_ms(1000);
 1c0:	8a e6       	ldi	r24, 0x6A	; 106
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_string>
 1c8:	80 e1       	ldi	r24, 0x10	; 16
 1ca:	97 e2       	ldi	r25, 0x27	; 39
 1cc:	29 e1       	ldi	r18, 0x19	; 25
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	f9 01       	movw	r30, r18
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <main+0x4c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d8:	d9 f7       	brne	.-10     	; 0x1d0 <main+0x4a>
 1da:	59 e1       	ldi	r21, 0x19	; 25
 1dc:	e5 2e       	mov	r14, r21
 1de:	f1 2c       	mov	r15, r1
lcd_number(a);_delay_ms(500);

if (a==2) {PORTB=0b00000101;dis_cmd(0x01); _delay_ms(50); dis_cmd(0xc5);lcd_string("FORWARD"); _delay_ms(50);}      //forward
if (a==4) {PORTB=0b00000100;dis_cmd(0x01); _delay_ms(50); dis_cmd(0xc5);lcd_string("LEFT");    _delay_ms(50);}      //left
if (a==6) {PORTB=0b00000001;dis_cmd(0x01); _delay_ms(50); dis_cmd(0xc5);lcd_string("RIGHT");   _delay_ms(50);}      //right
if (a==8) {PORTB=0b00001010;dis_cmd(0x01); _delay_ms(50); dis_cmd(0xc5);lcd_string("BACKWARD");_delay_ms(50);}      //backward
 1e0:	04 ed       	ldi	r16, 0xD4	; 212
 1e2:	10 e3       	ldi	r17, 0x30	; 48
 1e4:	4a e0       	ldi	r20, 0x0A	; 10
 1e6:	a4 2e       	mov	r10, r20
dis_cmd(0xc2);
lcd_number(a);_delay_ms(500);

if (a==2) {PORTB=0b00000101;dis_cmd(0x01); _delay_ms(50); dis_cmd(0xc5);lcd_string("FORWARD"); _delay_ms(50);}      //forward
if (a==4) {PORTB=0b00000100;dis_cmd(0x01); _delay_ms(50); dis_cmd(0xc5);lcd_string("LEFT");    _delay_ms(50);}      //left
if (a==6) {PORTB=0b00000001;dis_cmd(0x01); _delay_ms(50); dis_cmd(0xc5);lcd_string("RIGHT");   _delay_ms(50);}      //right
 1e8:	bb 24       	eor	r11, r11
 1ea:	b3 94       	inc	r11
a=(PINA&0x0f);  //PORTB=a;
dis_cmd(0xc2);
lcd_number(a);_delay_ms(500);

if (a==2) {PORTB=0b00000101;dis_cmd(0x01); _delay_ms(50); dis_cmd(0xc5);lcd_string("FORWARD"); _delay_ms(50);}      //forward
if (a==4) {PORTB=0b00000100;dis_cmd(0x01); _delay_ms(50); dis_cmd(0xc5);lcd_string("LEFT");    _delay_ms(50);}      //left
 1ec:	34 e0       	ldi	r19, 0x04	; 4
 1ee:	c3 2e       	mov	r12, r19
a=adc_read(0);    //**it reads 4-bits PA0-3**
a=(PINA&0x0f);  //PORTB=a;
dis_cmd(0xc2);
lcd_number(a);_delay_ms(500);

if (a==2) {PORTB=0b00000101;dis_cmd(0x01); _delay_ms(50); dis_cmd(0xc5);lcd_string("FORWARD"); _delay_ms(50);}      //forward
 1f0:	25 e0       	ldi	r18, 0x05	; 5
 1f2:	d2 2e       	mov	r13, r18


while(1)
{
int a;
a=adc_read(0);    //**it reads 4-bits PA0-3**
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 41 00 	call	0x82	; 0x82 <adc_read>
a=(PINA&0x0f);  //PORTB=a;
 1fc:	89 b3       	in	r24, 0x19	; 25
 1fe:	c8 2f       	mov	r28, r24
 200:	d0 e0       	ldi	r29, 0x00	; 0
 202:	cf 70       	andi	r28, 0x0F	; 15
 204:	d0 70       	andi	r29, 0x00	; 0
dis_cmd(0xc2);
 206:	82 ec       	ldi	r24, 0xC2	; 194
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
lcd_number(a);_delay_ms(500);
 20e:	ce 01       	movw	r24, r28
 210:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_number>
 214:	88 e8       	ldi	r24, 0x88	; 136
 216:	93 e1       	ldi	r25, 0x13	; 19
 218:	f7 01       	movw	r30, r14
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <main+0x94>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 21e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 220:	d9 f7       	brne	.-10     	; 0x218 <main+0x92>

if (a==2) {PORTB=0b00000101;dis_cmd(0x01); _delay_ms(50); dis_cmd(0xc5);lcd_string("FORWARD"); _delay_ms(50);}      //forward
 222:	c2 30       	cpi	r28, 0x02	; 2
 224:	d1 05       	cpc	r29, r1
 226:	a1 f4       	brne	.+40     	; 0x250 <main+0xca>
 228:	d8 ba       	out	0x18, r13	; 24
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
 232:	c8 01       	movw	r24, r16
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <main+0xae>
 238:	85 ec       	ldi	r24, 0xC5	; 197
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
 240:	8b e7       	ldi	r24, 0x7B	; 123
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_string>
 248:	c8 01       	movw	r24, r16
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <main+0xc4>
 24e:	36 c0       	rjmp	.+108    	; 0x2bc <main+0x136>
if (a==4) {PORTB=0b00000100;dis_cmd(0x01); _delay_ms(50); dis_cmd(0xc5);lcd_string("LEFT");    _delay_ms(50);}      //left
 250:	c4 30       	cpi	r28, 0x04	; 4
 252:	d1 05       	cpc	r29, r1
 254:	79 f4       	brne	.+30     	; 0x274 <main+0xee>
 256:	c8 ba       	out	0x18, r12	; 24
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
 260:	c8 01       	movw	r24, r16
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <main+0xdc>
 266:	85 ec       	ldi	r24, 0xC5	; 197
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
 26e:	83 e8       	ldi	r24, 0x83	; 131
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	35 c0       	rjmp	.+106    	; 0x2de <main+0x158>
if (a==6) {PORTB=0b00000001;dis_cmd(0x01); _delay_ms(50); dis_cmd(0xc5);lcd_string("RIGHT");   _delay_ms(50);}      //right
 274:	c6 30       	cpi	r28, 0x06	; 6
 276:	d1 05       	cpc	r29, r1
 278:	79 f4       	brne	.+30     	; 0x298 <main+0x112>
 27a:	b8 ba       	out	0x18, r11	; 24
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
 284:	c8 01       	movw	r24, r16
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <main+0x100>
 28a:	85 ec       	ldi	r24, 0xC5	; 197
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
 292:	88 e8       	ldi	r24, 0x88	; 136
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	23 c0       	rjmp	.+70     	; 0x2de <main+0x158>
if (a==8) {PORTB=0b00001010;dis_cmd(0x01); _delay_ms(50); dis_cmd(0xc5);lcd_string("BACKWARD");_delay_ms(50);}      //backward
 298:	c8 30       	cpi	r28, 0x08	; 8
 29a:	d1 05       	cpc	r29, r1
 29c:	79 f4       	brne	.+30     	; 0x2bc <main+0x136>
 29e:	a8 ba       	out	0x18, r10	; 24
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
 2a8:	c8 01       	movw	r24, r16
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <main+0x124>
 2ae:	85 ec       	ldi	r24, 0xC5	; 197
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
 2b6:	8e e8       	ldi	r24, 0x8E	; 142
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	11 c0       	rjmp	.+34     	; 0x2de <main+0x158>
if (a==5) {PORTB=0b00000000;dis_cmd(0x01); _delay_ms(50); dis_cmd(0xc5);lcd_string("STOP");    _delay_ms(50);}      //stop
 2bc:	25 97       	sbiw	r28, 0x05	; 5
 2be:	09 f0       	breq	.+2      	; 0x2c2 <main+0x13c>
 2c0:	99 cf       	rjmp	.-206    	; 0x1f4 <main+0x6e>
 2c2:	18 ba       	out	0x18, r1	; 24
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
 2cc:	c8 01       	movw	r24, r16
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <main+0x148>
 2d2:	85 ec       	ldi	r24, 0xC5	; 197
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
 2da:	87 e9       	ldi	r24, 0x97	; 151
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_string>
 2e2:	c8 01       	movw	r24, r16
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <main+0x15e>
 2e8:	85 cf       	rjmp	.-246    	; 0x1f4 <main+0x6e>

000002ea <__divmodhi4>:
 2ea:	97 fb       	bst	r25, 7
 2ec:	09 2e       	mov	r0, r25
 2ee:	07 26       	eor	r0, r23
 2f0:	0a d0       	rcall	.+20     	; 0x306 <__divmodhi4_neg1>
 2f2:	77 fd       	sbrc	r23, 7
 2f4:	04 d0       	rcall	.+8      	; 0x2fe <__divmodhi4_neg2>
 2f6:	0c d0       	rcall	.+24     	; 0x310 <__udivmodhi4>
 2f8:	06 d0       	rcall	.+12     	; 0x306 <__divmodhi4_neg1>
 2fa:	00 20       	and	r0, r0
 2fc:	1a f4       	brpl	.+6      	; 0x304 <__divmodhi4_exit>

000002fe <__divmodhi4_neg2>:
 2fe:	70 95       	com	r23
 300:	61 95       	neg	r22
 302:	7f 4f       	sbci	r23, 0xFF	; 255

00000304 <__divmodhi4_exit>:
 304:	08 95       	ret

00000306 <__divmodhi4_neg1>:
 306:	f6 f7       	brtc	.-4      	; 0x304 <__divmodhi4_exit>
 308:	90 95       	com	r25
 30a:	81 95       	neg	r24
 30c:	9f 4f       	sbci	r25, 0xFF	; 255
 30e:	08 95       	ret

00000310 <__udivmodhi4>:
 310:	aa 1b       	sub	r26, r26
 312:	bb 1b       	sub	r27, r27
 314:	51 e1       	ldi	r21, 0x11	; 17
 316:	07 c0       	rjmp	.+14     	; 0x326 <__udivmodhi4_ep>

00000318 <__udivmodhi4_loop>:
 318:	aa 1f       	adc	r26, r26
 31a:	bb 1f       	adc	r27, r27
 31c:	a6 17       	cp	r26, r22
 31e:	b7 07       	cpc	r27, r23
 320:	10 f0       	brcs	.+4      	; 0x326 <__udivmodhi4_ep>
 322:	a6 1b       	sub	r26, r22
 324:	b7 0b       	sbc	r27, r23

00000326 <__udivmodhi4_ep>:
 326:	88 1f       	adc	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	5a 95       	dec	r21
 32c:	a9 f7       	brne	.-22     	; 0x318 <__udivmodhi4_loop>
 32e:	80 95       	com	r24
 330:	90 95       	com	r25
 332:	bc 01       	movw	r22, r24
 334:	cd 01       	movw	r24, r26
 336:	08 95       	ret

00000338 <_exit>:
 338:	f8 94       	cli

0000033a <__stop_program>:
 33a:	ff cf       	rjmp	.-2      	; 0x33a <__stop_program>
